import 'package:flutter/material.dart';
import 'dart:math';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Community Post',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.green),
        useMaterial3: true,
      ),
      home: const CommunityPostPage(),
    );
  }
}

class CommunityPostPage extends StatefulWidget {
  const CommunityPostPage({super.key});

  @override
  State<CommunityPostPage> createState() => _CommunityPostPageState();
}

class _CommunityPostPageState extends State<CommunityPostPage> {
  int _selectedIndex = 1;
  final TextEditingController _searchController = TextEditingController();
  String _selectedFilter = "‡¶∏‡¶¨";
  bool _isLiked = false;
  int _likeCount = 24;
  bool _isBookmarked = false;
  bool _showComments = false;
  final TextEditingController _commentController = TextEditingController();
  final List<String> _comments = [
    "‡¶è‡¶á ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶®‡¶ø‡¶Æ ‡¶§‡ßá‡¶≤ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®",
    "‡¶Ü‡¶Æ‡¶æ‡¶∞‡¶ì ‡¶è‡¶ï‡¶á ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶õ‡¶ø‡¶≤, ‡¶ï‡ßÄ‡¶ü‡¶®‡¶æ‡¶∂‡¶ï ‡¶∏‡ßç‡¶™‡ßç‡¶∞‡ßá ‡¶ï‡¶∞‡¶≤‡ßá ‡¶≠‡¶æ‡¶≤‡ßã ‡¶π‡¶¨‡ßá"
  ];

  // List of seed image URLs
  final List<String> _seedImages = [
    "https://i.postimg.cc/Mp1QCP6N/begun-seed.jpg",
    "https://i.postimg.cc/Pq48xC8M/cha-seed.jpg",
    "https://i.postimg.cc/CLBDNMWF/dhoniya-seed.jpg",
    "https://i.postimg.cc/ZqZd480R/khira-seed.png",
    "https://i.postimg.cc/3rbmm0fS/mula-seed.jpg",
    "https://i.postimg.cc/ncymwbJq/papaiya-seed.jpg",
  ];

  // Get a random seed image
  String get _randomSeedImage {
    final random = Random();
    return _seedImages[random.nextInt(_seedImages.length)];
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("‡¶ï‡¶Æ‡¶ø‡¶â‡¶®‡¶ø‡¶ü‡¶ø"),
        actions: [
          IconButton(
            onPressed: () {},
            icon: const Icon(Icons.notifications),
            tooltip: "‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶™‡ßç‡¶§‡¶ø",
          ),
          IconButton(
            onPressed: () {},
            icon: const Icon(Icons.more_vert),
            tooltip: "‡¶Ü‡¶∞‡¶ì",
          ),
        ],
      ),
      body: ListView(
        padding: const EdgeInsets.all(12.0),
        children: [
          // Search bar
          TextField(
            controller: _searchController,
            decoration: InputDecoration(
              hintText: "‡¶ï‡¶Æ‡¶ø‡¶â‡¶®‡¶ø‡¶ü‡¶ø‡¶§‡ßá ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®",
              prefixIcon: const Icon(Icons.search),
              suffixIcon: IconButton(
                icon: const Icon(Icons.clear),
                onPressed: () {
                  _searchController.clear();
                  FocusScope.of(context).unfocus();
                },
              ),
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(12),
              ),
            ),
            onChanged: (value) {
              // Implement search functionality
            },
          ),
          const SizedBox(height: 12),

          // Filter chips
          SizedBox(
            height: 40,
            child: ListView(
              scrollDirection: Axis.horizontal,
              children: [
                _buildFilterChip("‡¶∏‡¶¨"),
                _buildFilterChip("‡¶Ü‡¶≤‡ßÅ"),
                _buildFilterChip("‡¶ü‡ßá‡¶Ç‡¶∞‡¶æ"),
                _buildFilterChip("‡¶ñ‡ßÅ‡¶¨‡¶æ‡¶®‡¶ø"),
                _buildFilterChip("‡¶ï‡¶´‡¶ø"),
                _buildFilterChip("‡¶ï‡¶∞‡¶≤‡¶æ"),
                _buildFilterChip("‡¶ß‡¶æ‡¶®"),
              ],
            ),
          ),

          const SizedBox(height: 12),

          // Post card
          _buildPostCard(),

          // Comments section
          if (_showComments) _buildCommentsSection(),
        ],
      ),
      bottomNavigationBar: BottomNavigationBar(
        items: const [
          BottomNavigationBarItem(icon: Icon(Icons.home), label: "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶´‡¶∏‡¶≤"),
          BottomNavigationBarItem(icon: Icon(Icons.forum), label: "‡¶ï‡¶Æ‡¶ø‡¶â‡¶®‡¶ø‡¶ü‡¶ø"),
          BottomNavigationBarItem(icon: Icon(Icons.person), label: "‡¶Ü‡¶™‡¶®‡¶ø"),
        ],
        currentIndex: _selectedIndex,
        selectedItemColor: Colors.green,
        onTap: (index) {
          setState(() {
            _selectedIndex = index;
          });
        },
      ),
    );
  }

  Widget _buildFilterChip(String label) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 4),
      child: ChoiceChip(
        label: Text(label),
        selected: _selectedFilter == label,
        selectedColor: Colors.green.shade100,
        onSelected: (selected) {
          setState(() {
            _selectedFilter = selected ? label : "‡¶∏‡¶¨";
          });
        },
      ),
    );
  }

  Widget _buildPostCard() {
    return Card(
      elevation: 3,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Padding(
        padding: const EdgeInsets.all(12.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // User info
            Row(
              children: [
                const CircleAvatar(
                  radius: 20,
                  backgroundImage: NetworkImage(
                      'https://i.postimg.cc/8z7W3Z6T/farmer-avatar.jpg'),
                ),
                const SizedBox(width: 8),
                Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: const [
                    Text("‡¶∞‡¶ø‡¶´‡¶æ‡¶§ ‚Ä¢ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂",
                        style: TextStyle(fontWeight: FontWeight.bold)),
                    Text("‡ß® ‡¶¶‡¶ø‡¶® ‡¶Ü‡¶ó‡ßá ‚Ä¢ ü•¨ ‡¶ï‡¶∞‡¶≤‡¶æ", style: TextStyle(fontSize: 12)),
                  ],
                ),
                const Spacer(),
                IconButton(
                  icon: Icon(
                    _isBookmarked ? Icons.bookmark : Icons.bookmark_border,
                    color: _isBookmarked ? Colors.green : null,
                  ),
                  onPressed: () {
                    setState(() {
                      _isBookmarked = !_isBookmarked;
                    });
                  },
                ),
              ],
            ),
            const SizedBox(height: 12),

            // Image - using random seed image
            ClipRRect(
              borderRadius: BorderRadius.circular(8),
              child: Image.network(
                _randomSeedImage,
                height: 200,
                width: double.infinity,
                fit: BoxFit.cover,
                loadingBuilder: (context, child, loadingProgress) {
                  if (loadingProgress == null) return child;
                  return Container(
                    height: 200,
                    color: Colors.grey.shade200,
                    child: const Center(child: CircularProgressIndicator()),
                  );
                },
                errorBuilder: (context, error, stackTrace) {
                  return Container(
                    height: 200,
                    color: Colors.grey.shade200,
                    child: const Icon(Icons.error),
                  );
                },
              ),
            ),
            const SizedBox(height: 12),

            // Post text
            const Text(
              "‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶≤‡¶æ - ‡¶è‡¶∞ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶ö‡¶ø‡¶π‡ßç‡¶®‡¶ø‡¶§ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡ßÅ‡¶®... "
              "‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶ü‡¶°‡¶ï‡ßç‡¶ü‡¶∞ ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶≤‡¶æ -‡¶è‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶æ‡¶¨‡ßç‡¶Ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶ö‡¶ø‡¶π‡ßç‡¶®‡¶ø‡¶§ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡•§ "
              "‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶¨‡ßá‡¶∂ ‡¶ï‡¶Ø‡¶º‡ßá‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Æ‡ßç‡¶≠‡¶æ‡¶¨‡¶®‡¶æ‡¶∞ ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: "
              "#‡¶™‡¶æ‡¶§‡¶æ ‡¶•‡ßá‡¶ï‡ßá ‡¶ó‡ßÅ‡¶°‡¶º‡¶¨‡ßá ‡¶™‡ßã‡¶ï‡¶æ, "
              "#‡¶Æ‡¶ø‡¶∑‡ßç‡¶ü‡¶ø ‡¶ï‡ßÅ‡¶Æ‡¶°‡¶º‡¶æ‡¶∞ ‡¶ï‡ßÄ‡¶°‡¶º‡¶æ‡¶™‡ßã‡¶ï‡¶æ ‡¶¨‡¶æ "
              "#‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø‡¶¨‡¶æ‡¶® ‡¶´‡¶∏‡¶≤‡•§ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶ö‡¶ø‡¶π‡ßç‡¶®‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
              textAlign: TextAlign.justify,
            ),

            const SizedBox(height: 12),

            // Tags
            Wrap(
              spacing: 8,
              children: const [
                Chip(
                  label: Text("#‡¶ï‡¶∞‡¶≤‡¶æ"),
                  backgroundColor: Colors.greenAccent,
                ),
                Chip(
                  label: Text("#‡¶´‡¶∏‡¶≤_‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ"),
                  backgroundColor: Colors.lightGreenAccent,
                ),
                Chip(
                  label: Text("#‡¶ï‡ßÉ‡¶∑‡¶ø_‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂"),
                  backgroundColor: Colors.lightGreen,
                ),
              ],
            ),

            const SizedBox(height: 12),

            // Action buttons
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Row(
                  children: [
                    IconButton(
                      icon: Icon(
                        _isLiked ? Icons.thumb_up : Icons.thumb_up_alt_outlined,
                        color: _isLiked ? Colors.green : null,
                      ),
                      onPressed: () {
                        setState(() {
                          _isLiked = !_isLiked;
                          _likeCount += _isLiked ? 1 : -1;
                        });
                      },
                    ),
                    Text("$_likeCount"),
                  ],
                ),
                IconButton(
                  icon: const Icon(Icons.comment_outlined),
                  onPressed: () {
                    setState(() {
                      _showComments = !_showComments;
                    });
                  },
                ),
                IconButton(
                  icon: const Icon(Icons.share_outlined),
                  onPressed: () {
                    _showShareDialog(context);
                  },
                ),
              ],
            ),

            const SizedBox(height: 8),

            // Bottom interaction button
            ElevatedButton.icon(
              onPressed: () {
                _showQuestionDialog(context);
              },
              icon: const Icon(Icons.question_answer),
              label: const Text("‡¶ï‡¶Æ‡¶ø‡¶â‡¶®‡¶ø‡¶ü‡¶ø‡¶§‡ßá ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®"),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.green.shade600,
                foregroundColor: Colors.white,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
                minimumSize: const Size.fromHeight(40),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildCommentsSection() {
    return Card(
      margin: const EdgeInsets.only(top: 12),
      elevation: 2,
      child: Padding(
        padding: const EdgeInsets.all(12.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              "‡¶Æ‡¶®‡ßç‡¶§‡¶¨‡ßç‡¶Ø‡¶∏‡¶Æ‡ßÇ‡¶π",
              style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
            ),
            const SizedBox(height: 8),
            
            // Comments list
            if (_comments.isEmpty)
              const Center(
                child: Text("‡¶ï‡ßã‡¶® ‡¶Æ‡¶®‡ßç‡¶§‡¶¨‡ßç‡¶Ø ‡¶®‡ßá‡¶á"),
              )
            else
              ..._comments.map((comment) => Padding(
                padding: const EdgeInsets.symmetric(vertical: 8.0),
                child: Row(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const CircleAvatar(
                      radius: 16,
                      child: Icon(Icons.person, size: 16),
                    ),
                    const SizedBox(width: 8),
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          const Text(
                            "‡¶ï‡ßÉ‡¶∑‡¶ï",
                            style: TextStyle(fontWeight: FontWeight.bold),
                          ),
                          Text(comment),
                        ],
                      ),
                    ),
                  ],
                ),
              )),
            
            const SizedBox(height: 12),
            
            // Add comment
            Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: _commentController,
                    decoration: InputDecoration(
                      hintText: "‡¶Æ‡¶®‡ßç‡¶§‡¶¨‡ßç‡¶Ø ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®...",
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(20),
                      ),
                      contentPadding: const EdgeInsets.symmetric(horizontal: 16),
                    ),
                  ),
                ),
                IconButton(
                  icon: const Icon(Icons.send, color: Colors.green),
                  onPressed: () {
                    if (_commentController.text.isNotEmpty) {
                      setState(() {
                        _comments.add(_commentController.text);
                        _commentController.clear();
                      });
                    }
                  },
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  void _showShareDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: const Text("‡¶∂‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®"),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              ListTile(
                leading: const Icon(Icons.facebook),
                title: const Text("‡¶´‡ßá‡¶∏‡¶¨‡ßÅ‡¶ï"),
                onTap: () {
                  Navigator.pop(context);
                  // Implement Facebook share
                },
              ),
              ListTile(
                leading: const Icon(Icons.share),
                title: const Text("‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™"),
                onTap: () {
                  Navigator.pop(context);
                  // Implement other share options
                },
              ),
            ],
          ),
        );
      },
    );
  }

  void _showQuestionDialog(BuildContext context) {
    final TextEditingController questionController = TextEditingController();
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: const Text("‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®"),
          content: TextField(
            controller: questionController,
            decoration: const InputDecoration(
              hintText: "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®...",
              border: OutlineInputBorder(),
            ),
            maxLines: 3,
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text("‡¶¨‡¶æ‡¶§‡¶ø‡¶≤"),
            ),
            ElevatedButton(
              onPressed: () {
                if (questionController.text.isNotEmpty) {
                  Navigator.pop(context);
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(content: Text("‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡¶ü‡¶ø ‡¶™‡ßã‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá")),
                  );
                }
              },
              style: ElevatedButton.styleFrom(backgroundColor: Colors.green),
              child: const Text("‡¶™‡ßã‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®"),
            ),
          ],
        );
      },
    );
  }
}