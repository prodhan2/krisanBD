import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:speech_to_text/speech_to_text.dart' as stt;
import 'package:image_picker/image_picker.dart';
import 'dart:io';

void main() {
  runApp(KrisanAIApp());
}

class KrisanAIApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Krisan AI',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        fontFamily: 'Kalpurush',
        primarySwatch: Colors.green,
        scaffoldBackgroundColor: Color(0xFFF8F9FA),
        appBarTheme: AppBarTheme(
          elevation: 0,
          backgroundColor: Colors.white,
          iconTheme: IconThemeData(color: Colors.green[800]),
          titleTextStyle: TextStyle(
            color: Colors.green[800],
            fontSize: 20,
            fontWeight: FontWeight.bold,
            fontFamily: 'Kalpurush',
          ),
        ),
        colorScheme: ColorScheme.light(
          primary: Colors.green[800]!,
          secondary: Colors.lightGreen[400]!,
        ),
      ),
      home: KrisanAIPage(),
    );
  }
}

class KrisanAIPage extends StatefulWidget {
  @override
  _KrisanAIPageState createState() => _KrisanAIPageState();
}

class _KrisanAIPageState extends State<KrisanAIPage> {
  final TextEditingController _controller = TextEditingController();
  final ScrollController _scrollController = ScrollController();
  final List<Map<String, dynamic>> _messages = [];

  bool _isBotTyping = false;
  bool _isListening = false;
  String _recognizedText = '';
  stt.SpeechToText _speech = stt.SpeechToText();
  final ImagePicker _picker = ImagePicker();
  File? _selectedFile;
  bool _conversationStarted = false;

  @override
  void initState() {
    super.initState();
    _initializeSpeech();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _addBotMessage(
        'ржЖрж╕рж╕рж╛рж▓рж╛ржорзБ ржЖрж▓рж╛ржЗржХрзБржо рж░рж╣рж┐ржо ржнрж╛ржЗ! тШАя╕П\n'
        'ржЖржорж┐ ржЖржкржирж╛рж░ ржХрзГрж╖рж┐ рж╕рж╣ржХрж╛рж░рзА, Krisan AIред\n'
        'ржЖржкржирж╛рж░ ржЬржорж┐рж░ ржХрзЛржирзЛ рж╕ржорж╕рзНржпрж╛ ржмрж╛ ржкрзЛржХрж╛рж░ ржЫржмрж┐ рждрзБрж▓рзЗ ржЖржорж╛ржХрзЗ ржжрзЗржЦрж╛рждрзЗ ржкрж╛рж░рзЗржи, ржЖржорж┐ ржЪрж┐ржирзЗ ржмрж▓рзЗ ржжрзЗржм!',
        delay: 1000,
      );
    });
  }

  void _initializeSpeech() async {
    try {
      bool available = await _speech.initialize(
        onStatus: (status) {
          if (status.toLowerCase().contains('done') ||
              status.toLowerCase().contains('notListening')) {
            _stopListening();
          }
        },
        onError: (error) {
          _stopListening();
          _showError('рж╕рзНржкрж┐ржЪ рж░рж┐ржХржЧржирж┐рж╢ржирзЗ рж╕ржорж╕рзНржпрж╛: ${error.errorMsg ?? 'ржЕржЬрж╛ржирж╛ рж╕ржорж╕рзНржпрж╛'}');
        },
      );
    } catch (e) {
      _showError('рж╕рзНржкрж┐ржЪ рж╕рж┐рж╕рзНржЯрзЗржо рж╢рзБрж░рзБ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛: $e');
    }
  }

  void _addBotMessage(String text, {int delay = 1500}) {
    setState(() {
      _messages.add({'sender': 'bot', 'text': text});
      _isBotTyping = true;
    });
    _scrollToBottom();
    
    Future.delayed(Duration(milliseconds: delay + (text.length * 10)), () {
      setState(() {
        _isBotTyping = false;
      });
      _scrollToBottom();
    });
  }

  void _startConversation() {
    if (!_conversationStarted) {
      _conversationStarted = true;
      
      Future.delayed(Duration(seconds: 2), () {
        _addUserMessage(
          'ржУрж╣рзЗ! рждрзБржЗ рждрзЛ ржжрзЗржЦрж┐ рж╕рждрзНржпрж┐ рж╕рждрзНржпрж┐ ржХржерж╛ ржмрж▓рждрзЗ ржкрж╛рж░рж┐рж╕! ЁЯШГ\n'
          'ржЖрж▓рж╛ржЗржХрзБржо ржЖрж╕рж╕рж╛рж▓рж╛ржо ржнрж╛ржЗред ржЖржорж╛рж░ ржзрж╛ржирзЗрж░ ржХрзНрж╖рзЗрждрзЗ ржЖржЬржХрзЗ ржЧрж┐ржпрж╝рзЗ ржжрзЗржЦрж┐ ржкрж╛рждрж╛ржпрж╝ ржХрзЗржоржи рж╣рж▓ржжрзЗ ржжрж╛ржЧ...\n'
          'ржЖрж░ ржХрж┐ржЫрзБ ржкрзЛржХрж╛рж░ ржорждржиржУ ржжрзЗржЦрж╛ ржпрж╛ржЪрзНржЫрзЗред ржЦрзБржм ржЪрж┐ржирзНрждрж╛ржпрж╝ ржЖржЫрж┐ ржнрж╛ржЗ!'
        );
        
        Future.delayed(Duration(seconds: 3), () {
          _addBotMessage(
            'ржЪрж┐ржирзНрждрж╛ ржХрж░ржмрзЗржи ржирж╛ рж░рж╣рж┐ржо ржнрж╛ржЗ! ЁЯЩП\n'
            'ржЖржкржирж╛рж░ рж╕ржорж╕рзНржпрж╛ржЯрж╛ ржнрж╛рж▓рзЛржнрж╛ржмрзЗ ржмрзБржЭрждрзЗ ржкрж╛рж░ржЫрж┐ред ржЖржкржирж┐ ржпржжрж┐ ржкрзЛржХрж╛рж░ ржПржХржЯрж╛ ржЫржмрж┐ рждрзБрж▓рзЗ ржжрзЗржи, '
            'ржЖржорж┐ рж╕рж╛ржерзЗ рж╕рж╛ржерзЗ ржмрж▓рзЗ ржжрж┐рждрзЗ ржкрж╛рж░ржмрзЛ ржПржЯрж╛ ржХрзЛржи ржкрзЛржХрж╛ ржЖрж░ ржПрж░ рж╕ржорж╛ржзрж╛ржи ржХрж┐ред\n\n'
            'ржирж┐ржЪрзЗрж░ ЁЯУ╖ ржЖржЗржХржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзЗ ржЫржмрж┐ рждрзБрж▓рзБржи ржмрж╛ ржЧрзНржпрж╛рж▓рж╛рж░рж┐ ржерзЗржХрзЗ рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рзБржиред',
            delay: 2000
          );
        });
      });
    }
  }

  Future<void> _pickImage(ImageSource source) async {
    try {
      final pickedFile = await _picker.pickImage(source: source);
      if (pickedFile != null) {
        setState(() {
          _selectedFile = File(pickedFile.path);
        });
        
        _addUserMessage('ржПржЗ ржкрзЛржХрж╛ржЯрж╛рж░ ржЫржмрж┐ рждрзБрж▓рж▓рж╛ржо ржнрж╛ржЗ, ржжрзЗржЦрзЛ рждрзЛ ржПржХржмрж╛рж░...', image: _selectedFile);
        _analyzeImage();
      }
    } catch (e) {
      _showError('ржЫржмрж┐ ржирж┐рж░рзНржмрж╛ржЪржирзЗ рж╕ржорж╕рзНржпрж╛: $e');
    }
  }

  void _analyzeImage() {
    setState(() {
      _isBotTyping = true;
    });
    
    Future.delayed(Duration(seconds: 3), () {
      _addBotMessage(
        'тЬЕ ржЫржмрж┐ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг рж╕ржорзНржкрзВрж░рзНржг!\n'
        'ржЖржкржирж╛рж░ ржЬржорж┐рждрзЗ ржорж╛ржЬрж░рж╛ ржкрзЛржХрж╛ (Stem Borer) ржЖржХрзНрж░ржоржг ржХрж░рзЗржЫрзЗред\n\n'
        'ржПржЗ ржкрзЛржХрж╛ рж╕ржорзНржкрж░рзНржХрзЗ ржХрж┐ржЫрзБ рждржерзНржп:\n'
        'тАв ржзрж╛ржи ржЧрж╛ржЫрзЗрж░ ржХрж╛ржгрзНржбрзЗрж░ ржнрж┐рждрж░рзЗ ржврзБржХрзЗ ржХрзНрж╖рждрж┐ ржХрж░рзЗ\n'
        'тАв ржЧрж╛ржЫрзЗрж░ ржнрж┐рждрж░рзЗрж░ ржЕржВрж╢ ржЦрзЗржпрж╝рзЗ ржлрзЗрж▓рзЗ\n'
        'тАв ржЖржХрзНрж░рж╛ржирзНржд ржЧрж╛ржЫрзЗрж░ ржкрж╛рждрж╛ ржкрзНрж░ржержорзЗ рж╣рж▓рзБржж рж╣ржпрж╝рзЗ рж╢рзБржХрж┐ржпрж╝рзЗ ржпрж╛ржпрж╝\n'
        'тАв ржкрж░рзЗ рж╕ржорзНржкрзВрж░рзНржг ржЧрж╛ржЫ ржорж╛рж░рж╛ ржпрзЗрждрзЗ ржкрж╛рж░рзЗ',
        delay: 1500
      );
      
      Future.delayed(Duration(seconds: 4), () {
        _addBotMessage(
          'ЁЯФН рж▓ржХрзНрж╖ржгржЧрзБрж▓рзЛ ржорж┐рж▓рзЗ ржЧрзЗржЫрзЗ?\n'
          'рзз. ржкрж╛рждрж╛ржпрж╝ рж╣рж▓рзБржж ржжрж╛ржЧ\n'
          'рзи. ржЧрж╛ржЫрзЗрж░ ржЧрзЛржбрж╝рж╛ржпрж╝ ржЫрзЛржЯ ржЫрж┐ржжрзНрж░\n'
          'рзй. ржЧрж╛ржЫ рж╣рзЗрж▓рзЗ ржкржбрж╝рж╛\n'
          'рзк. ржирждрзБржи ржХрзБрж╢рж┐ ржХржо ржЖрж╕рж╛',
          delay: 1500
        );
        
        Future.delayed(Duration(seconds: 4), () {
          _addBotMessage(
            'ЁЯЫбя╕П рж╕ржорж╛ржзрж╛ржирзЗрж░ ржЙржкрж╛ржпрж╝:\n\n'
            'рзз. ржкрзНрж░рждрж┐ рж▓рж┐ржЯрж╛рж░ ржкрж╛ржирж┐рждрзЗ рзз ржорж┐рж▓рж┐ "ржХрж╛рж░рзНржЯрж╛ржк рж╣рж╛ржЗржбрзНрж░рзЛржХрзНрж▓рзЛрж░рж╛ржЗржб рзк% ржЬрж┐" ржорж┐рж╢рж┐ржпрж╝рзЗ рж╕рзНржкрзНрж░рзЗ ржХрж░рзБржи\n'
            'рзи. ржмрж┐ржХрж▓рзНржк рж╣рж┐рж╕рзЗржмрзЗ ржирж┐ржорзЗрж░ рждрзЗрж▓ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░рзЗржи (ржкрзНрж░рждрж┐ рж▓рж┐ржЯрж╛рж░рзЗ рзл ржорж┐рж▓рж┐)\n'
            'рзй. ржЬржорж┐рждрзЗ ржкрж░рзНржпрж╛ржкрзНржд ржкрж╛ржирж┐ рж░рж╛ржЦрзБржи\n'
            'рзк. ржЖржХрзНрж░рж╛ржирзНржд ржЧрж╛ржЫ рждрзБрж▓рзЗ ржлрзЗрж▓рзБржи\n'
            'рзл. рж╕ржирзНржзрзНржпрж╛рж░ ржЖржЧрзЗ рж╕рзНржкрзНрж░рзЗ ржХрж░рж▓рзЗ ржнрж╛рж▓рзЛ ржлрж▓ ржкрж╛ржмрзЗржи',
            delay: 1500
          );
          
          Future.delayed(Duration(seconds: 4), () {
            _addBotMessage(
              'рж░рж╣рж┐ржо ржнрж╛ржЗ, ржЖрж░рзЛ ржХрзЛржирзЛ ржкрзНрж░рж╢рзНржи ржЖржЫрзЗ?\n'
              'ржмрж╛ ржЕржирзНржп ржХрзЛржирзЛ ржкрзЛржХрж╛рж░ ржЫржмрж┐ ржжрзЗржЦрж╛рждрзЗ ржЪрж╛ржи?\n\n'
              'ржЖржорж┐ рж╕ржмрж╕ржоржпрж╝ ржЖржкржирж╛рж░ ржкрж╛рж╢рзЗ ржЖржЫрж┐! ЁЯМ╛',
              delay: 1500
            );
          });
        });
      });
    });
  }

  void _addUserMessage(String text, {File? image}) {
    setState(() {
      _messages.add({
        'sender': 'user', 
        'text': text,
        'image': image
      });
    });
    _scrollToBottom();
  }

  void _startListening() async {
    if (!_isListening) {
      bool available = await _speech.initialize();
      if (available) {
        setState(() {
          _isListening = true;
          _recognizedText = '';
        });

        _speech.listen(
          onResult: (result) {
            setState(() {
              _recognizedText = result.recognizedWords;
              if (result.finalResult) {
                _controller.text = _recognizedText.trim();
                _handleUserResponse(_recognizedText.trim());
              }
            });
          },
          listenFor: Duration(seconds: 15),
          localeId: 'bn_BD',
        );
      }
    }
  }

  void _handleUserResponse(String text) {
    if (text.toLowerCase().contains('ржЫржмрж┐') || text.toLowerCase().contains('ржЪрж┐ржи')) {
      _showImagePickerDialog();
    } 
    else if (text.toLowerCase().contains('ржзржирзНржпржмрж╛ржж') || text.toLowerCase().contains('рж╢рзБржХрж░рж┐ржпрж╝рж╛')) {
      _addBotMessage(
        'ржЖржкржирж╛ржХрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрзЗрж░рзЗ ржЖржорж┐ ржЦрзБржм ржЦрзБрж╢рж┐ рж░рж╣рж┐ржо ржнрж╛ржЗ! ЁЯШК\n'
        'ржЖрж▓рзНрж▓рж╛рж╣ ржЖржкржирж╛рж░ ржлрж╕рж▓ржХрзЗ рж╕ржм рж░рзЛржЧ-ржкрзЛржХрж╛ ржерзЗржХрзЗ рж░ржХрзНрж╖рж╛ ржХрж░рзБржиред ржЖржорж┐ржиред\n'
        'ржЖрж░ ржХрзЛржирзЛ ржкрзНрж░рж╢рзНржи ржерж╛ржХрж▓рзЗ ржирж┐ржГрж╕ржВржХрзЛржЪрзЗ ржЬрж╛ржирж╛ржмрзЗржиред'
      );
    }
    else if (text.toLowerCase().contains('ржХрзЗржоржи ржЖржЫ') || text.toLowerCase().contains('ржЦржмрж░')) {
      _addBotMessage(
        'ржЖрж▓рж╣рж╛ржоржжрзБрж▓рж┐рж▓рзНрж▓рж╛рж╣ ржнрж╛рж▓рзЛ ржЖржЫрж┐ рж░рж╣рж┐ржо ржнрж╛ржЗ! ЁЯМ▒\n'
        'ржЖржкржирж╛рж░ ржЬржорж┐рж░ ржЦржмрж░ржЯрж╛ рж╢рзБржирж▓рзЗ ржнрж╛рж▓рзЛ рж▓рж╛ржЧржмрзЗред ржЖржЬржХрзЗ ржЬржорж┐рждрзЗ ржЧрж┐ржпрж╝рзЗржЫрж┐рж▓рзЗржи?'
      );
    }
    else {
      _addBotMessage(
        'ржжрзБржГржЦрж┐ржд рж░рж╣рж┐ржо ржнрж╛ржЗ, ржЖржорж┐ ржПржЦржирзЛ рж╢рж┐ржЦржЫрж┐ред я┐╜\n'
        'ржЖржкржирж┐ ржпржжрж┐ ржкрзЛржХрж╛рж░ ржЫржмрж┐ ржжрзЗржи ржмрж╛ ржЖржкржирж╛рж░ ржЬржорж┐рж░ рж╕ржорж╕рзНржпрж╛рж░ ржХржерж╛ ржмрж▓рзЗржи, '
        'ржЖржорж┐ ржнрж╛рж▓рзЛржнрж╛ржмрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░ржмрзЛ ржЗржирж╢рж╛ржЖрж▓рзНрж▓рж╛рж╣ред'
      );
    }
  }

  void _showImagePickerDialog() {
    showModalBottomSheet(
      context: context,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      builder: (context) => Container(
        padding: EdgeInsets.all(20),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(
              'ржЫржмрж┐ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи',
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
                color: Colors.green[800]),
            ),
            SizedBox(height: 20),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                _buildImagePickerOption(
                  icon: Icons.camera_alt,
                  label: 'ржХрзНржпрж╛ржорзЗрж░рж╛',
                  onTap: () {
                    Navigator.pop(context);
                    _pickImage(ImageSource.camera);
                  },
                ),
                _buildImagePickerOption(
                  icon: Icons.photo_library,
                  label: 'ржЧрзНржпрж╛рж▓рж╛рж░рж┐',
                  onTap: () {
                    Navigator.pop(context);
                    _pickImage(ImageSource.gallery);
                  },
                ),
              ],
            ),
            SizedBox(height: 10),
          ],
        ),
      ),
    );
  }

  Widget _buildImagePickerOption({
    required IconData icon,
    required String label,
    required VoidCallback onTap,
  }) {
    return InkWell(
      onTap: onTap,
      child: Column(
        children: [
          Container(
            width: 60,
            height: 60,
            decoration: BoxDecoration(
              color: Colors.green[50],
              borderRadius: BorderRadius.circular(15),
            ),
            child: Icon(icon, size: 30, color: Colors.green[800]),
          ),
          SizedBox(height: 8),
          Text(label, style: TextStyle(fontSize: 14)),
        ],
      ),
    );
  }

  void _stopListening() {
    if (_isListening) {
      _speech.stop();
      setState(() {
        _isListening = false;
      });
    }
  }

  void _showError(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.redAccent,
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(10)),
      ),
    );
  }

  void _scrollToBottom() {
    Future.delayed(Duration(milliseconds: 100), () {
      if (_scrollController.hasClients) {
        _scrollController.animateTo(
          _scrollController.position.maxScrollExtent,
          duration: Duration(milliseconds: 300),
          curve: Curves.easeOut,
        );
      }
    });
  }

  Widget _buildMessageBubble(Map<String, dynamic> message) {
    final isUser = message['sender'] == 'user';
    
    return Padding(
      padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      child: Row(
        mainAxisAlignment: isUser ? MainAxisAlignment.end : MainAxisAlignment.start,
        children: [
          if (!isUser)
            Container(
              margin: EdgeInsets.only(right: 8),
              child: CircleAvatar(
                backgroundColor: Colors.green[100],
                child: Icon(Icons.eco, color: Colors.green[800]),
              ),
            ),
          Flexible(
            child: Column(
              crossAxisAlignment: isUser ? CrossAxisAlignment.end : CrossAxisAlignment.start,
              children: [
                if (message['image'] != null)
                  Container(
                    height: 180,
                    width: 240,
                    margin: EdgeInsets.only(bottom: 8),
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(12),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black12,
                          blurRadius: 6,
                          offset: Offset(0, 3),
                        ),
                      ],
                      image: DecorationImage(
                        image: FileImage(message['image']),
                        fit: BoxFit.cover,
                      ),
                    ),
                  ),
                Container(
                  padding: EdgeInsets.symmetric(
                    horizontal: 16,
                    vertical: 12,
                  ),
                  decoration: BoxDecoration(
                    color: isUser 
                        ? Colors.green[800]
                        : Colors.white,
                    borderRadius: BorderRadius.only(
                      topLeft: Radius.circular(isUser ? 18 : 0),
                      topRight: Radius.circular(isUser ? 0 : 18),
                      bottomLeft: Radius.circular(18),
                      bottomRight: Radius.circular(18),
                    ),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.black12,
                        blurRadius: 4,
                        offset: Offset(0, 2),
                      ),
                    ],
                  ),
                  child: Text(
                    message['text'] ?? '',
                    style: TextStyle(
                      color: isUser ? Colors.white : Colors.grey[800],
                      fontSize: 15,
                    ),
                  ),
                ),
              ],
            ),
          ),
          if (isUser)
            Container(
              margin: EdgeInsets.only(left: 8),
              child: CircleAvatar(
                backgroundColor: Colors.green[100],
                child: Icon(Icons.person, color: Colors.green[800]),
              ),
            ),
        ],
      ),
    );
  }

  Widget _buildTypingIndicator() {
    return Padding(
      padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      child: Row(
        children: [
          CircleAvatar(
            backgroundColor: Colors.green[100],
            child: Icon(Icons.eco, color: Colors.green[800]),
          ),
          SizedBox(width: 8),
          Container(
            padding: EdgeInsets.symmetric(
              horizontal: 16,
              vertical: 12,
            ),
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.only(
                topRight: Radius.circular(18),
                bottomLeft: Radius.circular(18),
                bottomRight: Radius.circular(18),
              ),
              boxShadow: [
                BoxShadow(
                  color: Colors.black12,
                  blurRadius: 4,
                  offset: Offset(0, 2),
                ),
              ],
            ),
            child: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                SizedBox(
                  width: 20,
                  height: 20,
                  child: CircularProgressIndicator(
                    strokeWidth: 2,
                    valueColor: AlwaysStoppedAnimation<Color>(Colors.green[800]!),
                  ),
                ),
                SizedBox(width: 8),
                Text(
                  "Krisan AI рж▓рж┐ржЦржЫрзЗ...",
                  style: TextStyle(color: Colors.grey[600]),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Krisan AI - ржХрзГрж╖рж┐ рж╕рж╣ржХрж╛рж░рзА'),
        centerTitle: true,
        elevation: 0,
        actions: [
          IconButton(
            icon: Icon(Icons.help_outline),
            onPressed: () {
              showModalBottomSheet(
                context: context,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
                ),
                builder: (context) => Container(
                  padding: EdgeInsets.all(20),
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      CircleAvatar(
                        radius: 40,
                        backgroundColor: Colors.green[100],
                        child: Icon(Icons.eco, size: 40, color: Colors.green[800]),
                      ),
                      SizedBox(height: 16),
                      Text(
                        'Krisan AI рж╕ржорзНржкрж░рзНржХрзЗ',
                        style: TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                          color: Colors.green[800]),
                      ),
                      SizedBox(height: 12),
                      Text(
                        'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рж┐ ржХрзГрж╖ржХржжрзЗрж░ ржЬржирзНржп рждрзИрж░рж┐ ржЗржирзНржЯрзЗрж▓рж┐ржЬрзЗржирзНржЯ ржЕрзНржпрж╛ржк\n\n'
                        'тАв ржкрзЛржХрж╛ржорж╛ржХржбрж╝ ржЪрж┐ржирждрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рзЗ\n'
                        'тАв рж░рзЛржЧрзЗрж░ ржЪрж┐ржХрж┐рзОрж╕рж╛ ржмрж▓рзЗ ржжрзЗржпрж╝\n'
                        'тАв ржХрзГрж╖рж┐ ржкрж░рж╛ржорж░рзНрж╢ ржжрзЗржпрж╝\n'
                        'тАв ржЫржмрж┐ ржжрж┐ржпрж╝рзЗ ржкрзНрж░рж╢рзНржи ржХрж░рждрзЗ ржкрж╛рж░рзЗржи',
                        textAlign: TextAlign.center,
                        style: TextStyle(fontSize: 15),
                      ),
                      SizedBox(height: 20),
                      ElevatedButton(
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.green[800],
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12)),
                          padding: EdgeInsets.symmetric(
                            horizontal: 24, vertical: 12),
                        ),
                        onPressed: () => Navigator.pop(context),
                        child: Text('ржарж┐ржХ ржЖржЫрзЗ'),
                      ),
                    ],
                  ),
                ),
              );
            },
          ),
        ],
      ),
      body: Column(
        children: [
          Expanded(
            child: GestureDetector(
              onTap: () => _startConversation(),
              child: Container(
                decoration: BoxDecoration(
                  image: DecorationImage(
                    image: AssetImage('assets/images/rice_field_bg.png'), // Add your own background
                    fit: BoxFit.cover,
                    opacity: 0.05,
                  ),
                ),
                child: ListView.builder(
                  controller: _scrollController,
                  padding: EdgeInsets.only(top: 12, bottom: 12),
                  itemCount: _messages.length + (_isBotTyping ? 1 : 0),
                  itemBuilder: (context, index) {
                    if (_isBotTyping && index == _messages.length) {
                      return _buildTypingIndicator();
                    }
                    return _buildMessageBubble(_messages[index]);
                  },
                ),
              ),
            ),
          ),
          Container(
            padding: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
            decoration: BoxDecoration(
              color: Colors.white,
              boxShadow: [
                BoxShadow(
                  color: Colors.black12,
                  blurRadius: 10,
                  offset: Offset(0, -2),
                ),
              ],
            ),
            child: Row(
              children: [
                IconButton(
                  icon: Icon(Icons.camera_alt, color: Colors.green[800]),
                  onPressed: () => _showImagePickerDialog(),
                ),
                Expanded(
                  child: Container(
                    padding: EdgeInsets.symmetric(horizontal: 12),
                    decoration: BoxDecoration(
                      color: Colors.grey[100],
                      borderRadius: BorderRadius.circular(20),
                    ),
                    child: TextField(
                      controller: _controller,
                      decoration: InputDecoration(
                        hintText: 'ржорзЗрж╕рзЗржЬ рж▓рж┐ржЦрзБржи ржмрж╛ ржЫржмрж┐ ржЖржкрж▓рзЛржб ржХрж░рзБржи...',
                        border: InputBorder.none,
                        hintStyle: TextStyle(color: Colors.grey),
                      ),
                      enabled: false,
                    ),
                  ),
                ),
                SizedBox(width: 8),
                Container(
                  decoration: BoxDecoration(
                    color: Colors.green[800],
                    shape: BoxShape.circle,
                  ),
                  child: IconButton(
                    icon: Icon(_isListening ? Icons.mic_off : Icons.mic),
                    color: Colors.white,
                    onPressed: _startListening,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  @override
  void dispose() {
    _speech.stop();
    _controller.dispose();
    _scrollController.dispose();
    super.dispose();
  }
}